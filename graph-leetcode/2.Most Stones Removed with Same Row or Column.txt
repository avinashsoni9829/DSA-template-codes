class Solution {
    /*
      Most Stones Removed :

      If we club all the Stones in Same Row and Same Column as a Connected Component[as a graph]
      then our ans will be size of connected Component - 1 for each case

      we can use DSU [union by size] nd solve this as well
      also it can be done using DFS as well



    */

    private void dfs(int [][] stones , int node , boolean [] vis)
    {
         vis[node] = true;

         // same row and and same col

         for(int i = 0 ; i < stones.length ; ++i)
         {
             int r = stones[node][0];
             int c = stones[node][1];
             if(!vis[i] && (stones[i][0] == r || stones[i][1] == c)){
                 dfs(stones,i,vis);
             }
         }
    }

    public int removeStones(int[][] stones) {

        int n = stones.length;

        boolean [] vis = new boolean[n];

        int cc = 0;

        for(int i = 0 ; i < n ; ++i)
        {
             if(!vis[i]){
                 dfs(stones,i,vis);
                 cc++;
             }
        }

       return n - cc;
    }
}
/*
 DSU :
 we will sort the edgelist based on the weights as well as the queries

 now we will take the nodes and connect those which satisfy the query limit and union them

 if in the end the start and end are having same parent then it is true otherwise false


 for ex :

 edgelist -> [0,1,2] , [1,2,4] , [2,0,8] , [1,0,16]

 queries -> [0,1,2] , [0,2,5]

 lets see the first query

 limit = 2

 ===========

 so we iterare and see that the first node itself has 2 weight which is not. < 2
 hence we skip

 and now we check if find(0) == find(1)

 and we get 0 and 1 as all are independent so ans = false

 TC : 2
 We iterate and see the limit as 5
 so in edgelist
 we have [0,1,2] -> inside limit so we make union if 0 and 1
 we have [1,2,4] -> inside limit so we make union of 1 and 2
 we have [2,0,8] -> so we stop here and limit is not satisfied

 we have union of 0,1 and 1,2 so all belong to same group

 now in query we have : 0 , 2 , 5 and find(0) == find(2) == 0 hence ans is true


 Time :  Elog E + QLogQ , E = edge , Q= query

 Space :  O(n +Queries.length)

*/

class Solution {

    static class QueryWithIndex {
        int index;
        int[] query;

        QueryWithIndex(int index, int[] query) {
            this.index = index;
            this.query = query;
        }
    }


    public class DSU {
        private int[] parent, rank;

        public DSU(int n) {
            parent = new int[n];
            rank = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                rank[i] = 0;
            }
        }

        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]); // Path compression
            }
            return parent[x];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX != rootY) {
                if (rank[rootX] > rank[rootY]) {
                    parent[rootY] = rootX;
                } else if (rank[rootX] < rank[rootY]) {
                    parent[rootX] = rootY;
                } else {
                    parent[rootY] = rootX;
                    rank[rootX]++;
                }
            }
        }
    }


    public boolean[] distanceLimitedPathsExist(int n, int[][] edgeList, int[][] queries) {
         boolean [] ans = new boolean[queries.length];

         // sort the edgelist
         Arrays.sort(edgeList, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
               return Integer.compare(a[2], b[2]);
            }
        });



        // sort the queries such that thier index is maintained

       QueryWithIndex[] queryWithIndex = new QueryWithIndex[queries.length];

        for (int i = 0; i < queries.length; i++) {
            queryWithIndex[i] = new QueryWithIndex(i, queries[i]);
        }

        Arrays.sort(queryWithIndex, new Comparator<QueryWithIndex>() {
            @Override
            public int compare(QueryWithIndex q1, QueryWithIndex q2) {
                return Integer.compare(q1.query[2], q2.query[2]); // Compare based on 3rd value
            }
        });

        // now we iterate towards queries one by one and take union

        DSU dsu = new DSU(n);
        int edgeIndex = 0;
        for(QueryWithIndex q : queryWithIndex){
           int limit = q.query[2];
           // take union for edges
            while (edgeIndex < edgeList.length && edgeList[edgeIndex][2] < limit) {
                dsu.union(edgeList[edgeIndex][0], edgeList[edgeIndex][1]);
                edgeIndex++;
            }

            // now we simply check if parents are same

            int u = q.query[0];
            int v = q.query[1];
            // final ans computation
            ans[q.index] = dsu.find(u) == dsu.find(v);

        }


        return ans;



    }
}
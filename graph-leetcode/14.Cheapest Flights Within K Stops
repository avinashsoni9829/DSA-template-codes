import java.util.*;

class Solution {
    class Node {
        private int dest;
        private int cost;

        public Node(int dest, int cost) {
            this.dest = dest;
            this.cost = cost;
        }
    }

    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        // Distance map
        List<Integer> dist = new ArrayList<>(Collections.nCopies(n, Integer.MAX_VALUE));
        dist.set(src, 0); // Distance to the source is 0

        // Graph representation using adjacency list
        Map<Integer, List<Node>> graph = new HashMap<>();
        for (int[] flight : flights) {
            int u = flight[0];
            int v = flight[1];
            int cost = flight[2];

            Node destNode = new Node(v, cost);
            graph.computeIfAbsent(u, key -> new ArrayList<>()).add(destNode);
        }

        // BFS queue
        Queue<Node> queue = new LinkedList<>();
        queue.offer(new Node(src, 0));

        int stops = 0;

        // Perform BFS up to k + 1 levels
        while (!queue.isEmpty() && stops <= k) {
            int levelSize = queue.size();

            // Temporary distance list for the current level
            List<Integer> tempDist = new ArrayList<>(dist);

            while (levelSize-- > 0) {
                Node current = queue.poll();

                for (Node child : graph.getOrDefault(current.dest, new ArrayList<>())) {
                    int newDist = dist.get(current.dest) + child.cost;

                    if (newDist < tempDist.get(child.dest)) {
                        tempDist.set(child.dest, newDist);
                        queue.offer(new Node(child.dest, newDist));
                    }
                }
            }

            dist = tempDist;
            stops++;
        }

        return dist.get(dst) == Integer.MAX_VALUE ? -1 : dist.get(dst);
    }
}

/*
 Dijkstra with Max Heap
*/



class Solution {
    class Edge {
        private int dest;
        private double probability;

        public Edge(int d, double p) {
            dest = d;
            probability = p;
        }

        public int getDest() {
            return dest;
        }

        public double getProbability() {
            return probability;
        }
    }

    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        // Graph creation
        Map<Integer, List<Edge>> graph = new HashMap<>();
        for (int i = 0; i < edges.length; ++i) {
            int[] e = edges[i];
            int u = e[0];
            int v = e[1];
            graph.computeIfAbsent(u, k -> new ArrayList<>()).add(new Edge(v, succProb[i]));
            graph.computeIfAbsent(v, k -> new ArrayList<>()).add(new Edge(u, succProb[i]));
        }

        double[] probabilities = new double[n];
        PriorityQueue<Edge> pq = new PriorityQueue<>((a, b) -> Double.compare(b.getProbability(), a.getProbability()));

        probabilities[start] = 1.0;
        pq.offer(new Edge(start, 1.0));

        while (!pq.isEmpty()) {
            Edge currentEdge = pq.poll();
            int node = currentEdge.getDest();
            double prob = currentEdge.getProbability();

            if (prob < probabilities[node]) {
                continue;
            }

            for (Edge neighbor : graph.getOrDefault(node, new ArrayList<>())) {
                int child = neighbor.getDest();
                double childProb = neighbor.getProbability();

                if (probabilities[child] < prob * childProb) {
                    probabilities[child] = prob * childProb;
                    pq.offer(new Edge(child, probabilities[child]));
                }
            }
        }

        return probabilities[end];
    }
}

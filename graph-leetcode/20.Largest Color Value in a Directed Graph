/*

Time : O(V + E)
Space : O(V + E)

*/

class Solution {
    public int largestPathValue(String colors, int[][] edges) {
        // Step 1 : Graph Creation
        int n = colors.length();

        Map<Integer,List<Integer>>g = new HashMap<>();
        int [] indegree = new int[n];
        int [][] colorCount = new int[n][26];

        for(int [] e : edges){
             int u = e[0];
             int v = e[1];

             g.computeIfAbsent(u,k->new ArrayList<>()).add(v);
             indegree[v]++;
        }
        // lets do topo ordering
        Queue<Integer> q = new LinkedList<>();
        // adding to queue
        for(int i = 0 ; i < n ; ++i){
             if(indegree[i] == 0){
                  q.offer(i);
             }
        }

        int nodeVis = 0;
        int ans = Integer.MIN_VALUE;
        while(!q.isEmpty()){
             int nd = q.poll();
             nodeVis++;
             int ci = colors.charAt(nd) - 'a';
             colorCount[nd][ci]++; // this is because nd can be a part of many paths
             ans = Math.max(ans,colorCount[nd][ci]);
             // traverse the child ;
             for(int child : g.getOrDefault(nd,new ArrayList<>())){

                 // for child initialize the cc values with the current mx from nd or child
                 // so that we dont miss anything
                  for (int i = 0; i < 26; i++) {
                    colorCount[child][i] = Math.max(colorCount[child][i], colorCount[nd][i]);
                }

                indegree[child]--;
                if(indegree[child] == 0){
                    q.offer(child);
                }
             }

        }

        return nodeVis == n ? ans : -1;
    }
}
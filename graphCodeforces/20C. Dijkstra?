import java.util.*;

public class Solution {
    static Scanner scanner = new Scanner(System.in);

    static class Pair implements Comparable<Pair> {
        int node, dist;
        Pair(int node, int dist) {
            this.node = node;
            this.dist = dist;
        }

        public int compareTo(Pair other) {
            return Integer.compare(this.dist, other.dist);
        }
    }

    public static void main(String[] args) {
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        List<List<Pair>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < m; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int w = scanner.nextInt();
            graph.get(u).add(new Pair(v, w));
            graph.get(v).add(new Pair(u, w));
        }

        // Dijkstra's Algorithm
        int[] dist = new int[n + 1];
        int[] parent = new int[n + 1];
        boolean[] visited = new boolean[n + 1];

        Arrays.fill(dist, Integer.MAX_VALUE);
        Arrays.fill(parent, -1);

        PriorityQueue<Pair> pq = new PriorityQueue<>();
        int source = 1, dest = n;
        dist[source] = 0;
        pq.add(new Pair(source, 0));

        while (!pq.isEmpty()) {
            Pair current = pq.poll();
            int node = current.node;

            if (visited[node]) continue;  // Skip if already processed
            visited[node] = true;

            for (Pair neighbor : graph.get(node)) {
                int nextNode = neighbor.node;
                int edgeWeight = neighbor.dist;

                if (!visited[nextNode] && dist[node] + edgeWeight < dist[nextNode]) {
                    dist[nextNode] = dist[node] + edgeWeight;
                    parent[nextNode] = node;
                    pq.add(new Pair(nextNode, dist[nextNode]));
                }
            }
        }

        // Print shortest path
        if (dist[dest] == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            List<Integer> path = new ArrayList<>();
            for (int v = dest; v != -1; v = parent[v]) {
                path.add(v);
            }
            Collections.reverse(path);

            for (int i = 0; i < path.size(); i++) {
                if (i > 0) System.out.print(" ");
                System.out.print(path.get(i));
            }
            System.out.println();
        }
    }
}

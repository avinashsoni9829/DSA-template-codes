class Solution {
    int r;
    int c;
    int[][] dir = new int[][] {
    {1, 0},  // Move down
    {-1, 0}, // Move up
    {0, 1},  // Move right
    {0, -1}  // Move left
};
    boolean dfs(int [][] g , int x, int y)
    {
         if(x < 0 || x >= r || y < 0 || y >= c || g[x][y] == 1) return false;
         if(x == r - 1) return true;

         g[x][y] = 1;

        for(int i = 0 ; i < 4 ; ++i)
        {
             int nx = x + dir[i][0];
             int ny = y + dir[i][1];

             if(dfs(g,nx,ny)) return true;

        }
        // no need for g[x][y] = 1 as that path we wont follow again
        return false;
    }

    boolean bsOnAns(int [][] cells , int t)
    {
         int [][]g = new int[r][c];

         for(int i = 0 ; i <= t ; ++i)
         {
              int x = cells[i][0] - 1;
              int y = cells[i][1] - 1;

              g[x][y] = 1;
         }

         for(int i = 0 ; i < c ; ++i)
         {
              if(g[0][i] == 0 && dfs(g,0,i))
              {
                   return true;
              }
         }

         return false;
    }
    public int latestDayToCross(int row, int col, int[][] cells) {
        r = row;
        c = col;

        int l = 0 , r = cells.length - 1;

        int ans = 0;

        while(l <= r)
        {
             int m = l + (r - l)/2;
             if(bsOnAns(cells,m)){
                  ans = m + 1;
                  l = m + 1;
             }
             else {
                  r = m - 1;
             }
        }

        return ans;
    }
}